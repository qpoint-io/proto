// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eventstore/v1/main.proto

package eventstorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qpoint-io/proto/gen/go/eventstore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventStoreServiceName is the fully-qualified name of the EventStoreService service.
	EventStoreServiceName = "eventstore.v1.EventStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventStoreServicePingProcedure is the fully-qualified name of the EventStoreService's Ping RPC.
	EventStoreServicePingProcedure = "/eventstore.v1.EventStoreService/Ping"
	// EventStoreServiceIngestProcedure is the fully-qualified name of the EventStoreService's Ingest
	// RPC.
	EventStoreServiceIngestProcedure = "/eventstore.v1.EventStoreService/Ingest"
)

// EventStoreServiceClient is a client for the eventstore.v1.EventStoreService service.
type EventStoreServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	Ingest(context.Context) *connect.ClientStreamForClient[v1.IngestRequest, v1.IngestResponse]
}

// NewEventStoreServiceClient constructs a client for the eventstore.v1.EventStoreService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventStoreServiceMethods := v1.File_eventstore_v1_main_proto.Services().ByName("EventStoreService").Methods()
	return &eventStoreServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+EventStoreServicePingProcedure,
			connect.WithSchema(eventStoreServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		ingest: connect.NewClient[v1.IngestRequest, v1.IngestResponse](
			httpClient,
			baseURL+EventStoreServiceIngestProcedure,
			connect.WithSchema(eventStoreServiceMethods.ByName("Ingest")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventStoreServiceClient implements EventStoreServiceClient.
type eventStoreServiceClient struct {
	ping   *connect.Client[v1.PingRequest, v1.PingResponse]
	ingest *connect.Client[v1.IngestRequest, v1.IngestResponse]
}

// Ping calls eventstore.v1.EventStoreService.Ping.
func (c *eventStoreServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Ingest calls eventstore.v1.EventStoreService.Ingest.
func (c *eventStoreServiceClient) Ingest(ctx context.Context) *connect.ClientStreamForClient[v1.IngestRequest, v1.IngestResponse] {
	return c.ingest.CallClientStream(ctx)
}

// EventStoreServiceHandler is an implementation of the eventstore.v1.EventStoreService service.
type EventStoreServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	Ingest(context.Context, *connect.ClientStream[v1.IngestRequest]) (*connect.Response[v1.IngestResponse], error)
}

// NewEventStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventStoreServiceHandler(svc EventStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventStoreServiceMethods := v1.File_eventstore_v1_main_proto.Services().ByName("EventStoreService").Methods()
	eventStoreServicePingHandler := connect.NewUnaryHandler(
		EventStoreServicePingProcedure,
		svc.Ping,
		connect.WithSchema(eventStoreServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	eventStoreServiceIngestHandler := connect.NewClientStreamHandler(
		EventStoreServiceIngestProcedure,
		svc.Ingest,
		connect.WithSchema(eventStoreServiceMethods.ByName("Ingest")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eventstore.v1.EventStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventStoreServicePingProcedure:
			eventStoreServicePingHandler.ServeHTTP(w, r)
		case EventStoreServiceIngestProcedure:
			eventStoreServiceIngestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventStoreServiceHandler struct{}

func (UnimplementedEventStoreServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventstore.v1.EventStoreService.Ping is not implemented"))
}

func (UnimplementedEventStoreServiceHandler) Ingest(context.Context, *connect.ClientStream[v1.IngestRequest]) (*connect.Response[v1.IngestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventstore.v1.EventStoreService.Ingest is not implemented"))
}
